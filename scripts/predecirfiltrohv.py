# -*- coding: utf-8 -*-
"""PredecirFiltroHV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VmdahrPPdwjwonEyXXxSZrVB191qfx0j
"""

#from google.colab import drive
#drive.mount('/content/drive')

# importar librerías
import numpy as np #Operaciones Matriciales
import pandas as pd #Estructurar data y Analisis
import matplotlib.pyplot as plt 
import pickle
import seaborn as sns
import warnings
from sklearn.preprocessing import LabelEncoder #Convierte etiquetas a valores numéricos
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import KFold, cross_val_score
from sklearn.feature_selection import VarianceThreshold #Seleccion de características
import sys
import glob
import shutil
import os.path

warnings.filterwarnings('ignore')

# Get the total number of args passed to the demo.py
total = len(sys.argv)
 
# Get the arguments list 
cmdargs = str(sys.argv)
#print ("The total numbers of args passed to the script: %d " % total)
#print ("Args list: %s " % cmdargs)

root_path = "C:\\RPA\\hv_bin\\"
#hv_data_set = sys.argv[1] #'csv_generado_1564350669078.csv'
#root_path = 'drive/My Drive/Topicos Avanzados de IA/TAIA_Ejercicio1/Proyecto Hoja Vida/'
#hv_data_set = root_path+'csv_generado_1564350669078.csv'

#Lectura de los datos
warnings.filterwarnings("ignore")


filename = root_path+'finalized_model_RedNeuronal.sav'
# load the model from disk
loaded_model = pickle.load(open(filename, 'rb'))
#print(loaded_model)

#Funcion para ejecutar modelo con los datos recibidos
def validarModeloConCandidato(archivo):
	hv_data_set = archivo

	df=pd.read_csv(hv_data_set, engine='python', encoding='ISO-8859-1', error_bad_lines=False)
	#print('Número de variables: {0}'.format(df.shape[1]))
	#print('Número de registros: {0}'.format(df.shape[0]))
	#df.describe() #Permite ver las estadísticas básicas de las variables numéricas

	pd.DataFrame(df.isnull().sum(),columns=['Número de N/A']) #Identificar si hay datos nulos
	df = df.fillna(0) #Reemplazando Nulos por Cero

	df = df.drop(['NombreCandidato', 'Email',"Telefono","Perfil","ExperienciaLaboral"], axis=1)
	#df.head()

	var_categoricas = list(df.select_dtypes(include=['object']).columns)
	df.EstadoCandidato.replace(('Rechazado', 'Aprobado'), (0, 1), inplace=True)
	var_numericas = list(df.select_dtypes(exclude=['object']).columns)

	df = df.drop(['InglesVerbal', 'InglesEscrito'], axis=1)

	#Se etiquetan las categorías que no son numéricas para trabajar más fácil con ellas.
	df['Carrera'] = LabelEncoder().fit_transform(df['Carrera'])
	df['Residencia'] = LabelEncoder().fit_transform(df['Residencia'])
	df['Universidad'] = LabelEncoder().fit_transform(df['Universidad'])
	#df.describe()

	X=df[df.columns.difference(['EstadoCandidato'])] #Se separa la variable respuesta del resto de variables.
	y=df['EstadoCandidato']

	#X.head()

	#Se usa el método de la varianza para buscar hacer una selección de características adicional
	#selector = VarianceThreshold(threshold=0.95)
	#X_new = selector.fit_transform(X)
	#sel_features = np.squeeze(np.where(selector.get_support()==True)) #Where selection is True?
	#print("Features selected: ", sel_features)

	"""En el modelo entrenado orignal elegia lo siguiente:
	Features selected:  [ 0  1  2  3  4  7  8  9 10 11 13 15 16 17 19 20 21 22]
	"""

	X_new = X.drop(['Creative thinking', 'Curtomer management',"Leadership","Project Management","Self learning"], axis=1)
	#X_new.head()

	scaler = MinMaxScaler() #Se estandarizan las variables.
	X_train = scaler.fit_transform(X_new)
	X_test=scaler.transform(X_new)
	#X_train

	#result = loaded_model.score(X_test, y)
	#print(result)

	#print(X_train)

	prediccion = loaded_model.predict(np.array(X_test))
	#print(prediccion)

	#print(y)
	#sys.exit(prediccion[0])
	return prediccion[0]

#Busco los archivos que haya por procesar
archivosCSV = glob.glob("C:\\RPA\\hv_preprocesado/*.csv")

#Por cada archivo encontrado filtro con modelo
for archivo in archivosCSV:
	#print(archivo)
	resultado = validarModeloConCandidato(archivo)
	if resultado == 1:
		print("Aceptado")
		shutil.move(archivo, archivo.replace("hv_preprocesado","hv_aceptados"))
		if(os.path.exists(archivo.replace('csv', 'pdf'))):
			shutil.move(archivo.replace('csv', 'pdf'), archivo.replace('csv', 'pdf').replace("hv_preprocesado","hv_aceptados"))
	else:
		print("Rechazado")
		shutil.move(archivo, archivo.replace("hv_preprocesado","hv_rechazados"))
		if(os.path.exists(archivo.replace('csv', 'pdf'))):
			shutil.move(archivo.replace('csv', 'pdf'), archivo.replace('csv', 'pdf').replace("hv_preprocesado","hv_rechazados"))